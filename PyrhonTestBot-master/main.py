import logging
import string

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, executor, types
from pyowm import OWM
from pyowm.utils import config
from pyowm.utils import timestamps
from aiogram.types import Message, Location
from pprint import pprint
import requests
from pyowm.utils.config import get_default_config
import pyowm
from vars import *
from textFiles import *
from Kosti import *


long = 0
latd = 0
mgr = owm.weather_manager()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

#                           start and intro
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer(intro, reply_markup=mainmenu)


#                           list of lessons
@dp.message_handler(text = 'üìñ –£—Ä–æ–∫–∏')
async def mainMenu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫', reply_markup=leslist)


#                           useful links list
@dp.message_handler(text = 'üîÉ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
async def usefullinkslist(message: types.Message):
    await message.answer(usefulLinks, reply_markup=backtomenu)
    if '‚¨Ö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–µ–Ω—é' in message.text:
        await message.answer(intro, reply_markup=mainmenu)


#                           entertainment
@dp.message_handler(text = 'üéØ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
async def entertainment(message: types.Message):
    await message.answer('–ö—É–¥–∞ –ø–æ–π–¥–µ–º?', reply_markup=entList)


#                           Weather Forecast
@dp.message_handler(text = '–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
async def geolocation (message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup=locationList)

@dp.message_handler(content_types=['location'])
async def locationwork (message: types.Message):
    if message.location is not None:
        a = dict(message.location)
        global lat, lon
        latd = a['latitude']
        long = a['longitude']
        observation = mgr.weather_at_place('Tashkent,uz')
        w = observation.weather
        await message.answer(f'''
–ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ: {w.detailed_status}. 
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(w.temperature('celsius')['temp'])}¬∞C.''', reply_markup= backtomenu)


#                           Binar search
@dp.message_handler(text = '–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫')
async def binarchoicemenu (message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É\n'
                         '1. –í—ã –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç–µ —á–∏—Å–ª–æ –∏ –±–æ—Ç —É–≥–∞–¥—ã–≤–∞–µ—Ç\n'
                         '2. –ë–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤—ã —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ', reply_markup= binarchoice)



#                           PCguess
@dp.message_handler(text = '–Ø —Ö–æ—á—É —á—Ç–æ–±—ã –±–æ—Ç —É–≥–∞–¥—ã–≤–∞–ª')
async def bingame1 (message: types.Message):
    await message.answer('–ò —Ç–∞–∫ –Ω–∞—á–Ω–µ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100', reply_markup=zagadalcol)


@dp.message_handler(text = '–Ø –∑–∞–≥–∞–¥–∞–ª')
async def bingame1start (message: types.Message):
    global guess
    guess = userguess()
    await message.answer(f'–í–∞—à–µ —á–∏—Å–ª–æ {guess}?', reply_markup=updown)


@dp.callback_query_handler(text="1")
async def ifmore (call: types.CallbackQuery):
    global guess
    guess = userguess(a = upper, b = guess)
    await call.message.answer(f'–í–∞—à–µ —á–∏—Å–ª–æ {guess}?', reply_markup=updown)

@dp.callback_query_handler(text="2")
async def ifless (call: types.CallbackQuery):
    global guess
    guess = userguess(a = guess, b = lower)
    await call.message.answer(f'–í–∞—à–µ —á–∏—Å–ª–æ {guess}?', reply_markup=updown)
@dp.callback_query_handler(text="3")
async def ifless (call: types.CallbackQuery):
    await call.message.answer(f'–í–∞—à–µ —á–∏—Å–ª–æ {guess} - —É–≥–∞–¥–∞–Ω–Ω–æ.', reply_markup=userguessgoback)

@dp.message_handler(text = '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')
async def binarchoicemenu (message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É\n'
                         '1. –í—ã –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç–µ —á–∏—Å–ª–æ –∏ –±–æ—Ç —É–≥–∞–¥—ã–≤–∞–µ—Ç\n'
                         '2. –ë–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤—ã —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ', reply_markup= binarchoice)









#                                   user guess
@dp.message_handler(text='–Ø —Ö–æ—á—É —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ')
async def bingame2(message: types.Message):
    await message.answer()
























#                           lessons content
@dp.message_handler()
async def listOfLesson(message: types.Message):
    if '–£—Ä–æ–∫ ‚Ññ1' in message.text:
        await message.answer(theme1)
    elif '–£—Ä–æ–∫ ‚Ññ2' in message.text:
        await message.answer(theme2)
    elif '–£—Ä–æ–∫ ‚Ññ3' in message.text:
        await message.answer(theme3)
    elif '–£—Ä–æ–∫ ‚Ññ4' in message.text:
        await message.answer(theme4)
    elif '–£—Ä–æ–∫ ‚Ññ5' in message.text:
        await message.answer(theme5)
    elif '–£—Ä–æ–∫ ‚Ññ6' in message.text:
        await message.answer(theme6)
    elif '‚¨Ö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–µ–Ω—é' in message.text:
        await message.answer(intro, reply_markup=mainmenu)
    while message.text == '–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏':
        await message.answer('–ò —Ç–∞–∫ –≤–∞—à–∏ –∫–æ—Å—Ç–∏:')
        result1, result2 = kostigame()
        finalResult = (f'{result1}               {result2}')
        await message.answer(finalResult)
        break





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

